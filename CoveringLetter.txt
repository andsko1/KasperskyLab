Для решения задания и демонстрации использовался проект asp.NET.
1. Задание 1. Выполнено в проекте KasperskyLabModels - ParallelQueue.cs
Синхронизация потоков выполнена с помощью локера. Для приостановки процесса извлечения элемента используется стандартный семафор.
В сервис работы с очередью вставлены слипы, для демонстрации ожидания потоков извлечения.
Отслеживание состояния бесконечного ожидания потока извлечения (если количество извлечений > количества вставок) не выполнялась, установлена проверка на уровне контроллера. На уровне клиента такая проверка не добавлена. 
Решение возвращения на ajax request HTML строки не лучшее, но для теста вполне достаточно
2. Задание 2. Выполнено в проекте KasperskyLabServices - StackSearchService
Для решения использовался словарь (типизированная хэш-таблица). Поиск ключа в словаре проводится за время O(1), поэтому алгоритм предпочтительней для повышения быстродействия.
Одинаковы пары значений не выводятся, но есть возможность доработки алгоритма.

PS. В проекте asp не использовались инъекции зависимостей для простоты разработки, хотя это более предпочтительно было бы.
